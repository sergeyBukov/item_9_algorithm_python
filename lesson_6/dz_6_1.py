# Задание№1. 6. Работа с динамической памятью
# 1. Подсчитать, сколько было выделено памяти под переменные в ранее разработанных программах
# в рамках первых трех уроков. Проанализировать результат и определить программы с наиболее эффективным
# использованием памяти.
# Примечание: Для анализа возьмите любые 1-3 ваших программы или несколько вариантов кода для одной
# и той же задачи. Результаты анализа вставьте в виде комментариев к коду. Также укажите в
# комментариях версию Python и разрядность вашей ОС.

from pympler import tracker

# ПРИМЕР№1 В диапазоне натуральных чисел от 2 до 99 определить, сколько из них
# # кратны каждому из чисел в диапазоне от 2 до 9

# tr = tracker.SummaryTracker()
# result = {}
# for n in range(2, 10):
#     result[n] = []
#     for f in range(2, 100):
#         if f % n == 0:
#             result[n].append(f)
#     print(f'Для числа {n} кратны - {len(result[n])}. Кратные числа: {result[n]}.')
#
# print()
# tr.print_diff()

# Результат примера №1:
# Для числа 2 кратны - 49. Кратные числа: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98].
# Для числа 3 кратны - 33. Кратные числа: [3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42, 45, 48, 51, 54, 57, 60, 63, 66, 69, 72, 75, 78, 81, 84, 87, 90, 93, 96, 99].
# Для числа 4 кратны - 24. Кратные числа: [4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96].
# Для числа 5 кратны - 19. Кратные числа: [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95].
# Для числа 6 кратны - 16. Кратные числа: [6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84, 90, 96].
# Для числа 7 кратны - 14. Кратные числа: [7, 14, 21, 28, 35, 42, 49, 56, 63, 70, 77, 84, 91, 98].
# Для числа 8 кратны - 12. Кратные числа: [8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96].
# Для числа 9 кратны - 11. Кратные числа: [9, 18, 27, 36, 45, 54, 63, 72, 81, 90, 99].

#  types |   # objects |   total size
# ======================= | =========== | ============
#                    list |        2421 |    211.06 KB
#                     str |        2411 |    165.99 KB
#                     int |         421 |     11.51 KB
#                    dict |           4 |      1.02 KB
#                    code |           1 |    246     B
#                   tuple |           4 |    224     B
#   function (store_info) |           1 |    136     B
#                    cell |           2 |     80     B
#                  method |           1 |     64     B

# Вывод примера №1: основная память занята под сохранение получившихся чисел в виде списков(list 211.06 KB) и вывода их в виде строк (str 165.99 KB)

# ПРИМЕР№2 Найти сумму и произведение цифр трехзначного числа, который вводит пользователь
# tr = tracker.SummaryTracker()
# n = int(input("Введите трехзначное число:"))
#
# if 99 < n < 999:
#     a = n % 10
#     n = n // 10
#     c = n % 10
#     n = n // 10
#     sum_number = int(a + c + n)
#     multiplication = int(a * c * n)
#     print(f'Сумма цифр введенного числа равно: {sum_number}')
#     print(f'Произведение цифр введенного числа равно: {multiplication}')
# else:
#     print("Ввведенное число не трехзначное")
# tr.print_diff()

# результат примера №2
# Введите трехзначное число:698
# Сумма цифр введенного числа равно: 23
# Произведение цифр введенного числа равно: 432
#                  types |   # objects |   total size
# ======================= | =========== | ============
#                    list |        2378 |    206.27 KB
#                     str |        2376 |    163.97 KB
#                     int |         421 |     11.51 KB
#                    dict |           3 |    680     B
#   function (store_info) |           1 |    136     B
#                    cell |           2 |     80     B
#                    code |           0 |     70     B
#                   tuple |           2 |     64     B
#                  method |           1 |     64     B
# Вывод примера №2: основная память занята под сохранение получившихся чисел в виде списков(list 206.27 KB) и вывода их в виде строк (str 163.97)

# ПРИМЕР№3
import random

tr = tracker.SummaryTracker()
array = [random.randint(1, 10) for _ in range(20)]
print(f'Созданный массив: {array}')

max_index = 0
list_number = []
# находим максимальное кол-во повторений
for i in array:
    if array.count(i) > array.count(max_index):
        max_index = array.count(i)
# находим все числа с макимальным повторением
for i in array:
    if array.count(i) == max_index:
        list_number.append(i)
set_number = set(list_number)
print(f'Максимальное число повторений равно: {max_index} для чисел: {set_number}')
tr.print_diff()

# результат примера №3
# Созданный массив: [1, 1, 8, 1, 2, 3, 7, 7, 6, 9, 6, 1, 10, 6, 3, 7, 3, 8, 4, 9]
# Максимальное число повторений равно: 3 для чисел: {3, 6, 7}
#                   types |   # objects |   total size
# ======================= | =========== | ============
#                    list |        2380 |    206.70 KB
#                     str |        2375 |    163.92 KB
#                     int |         420 |     11.48 KB
#                    dict |           3 |    400     B
#                     set |           1 |    216     B
#   function (store_info) |           1 |    136     B
#                    cell |           2 |     80     B
#                    code |           0 |     70     B
#                  method |           1 |     64     B
#                   tuple |           1 |      8     B

# Проверка версии Python
import sys

print(sys.version)
# результат: 3.8.6 (tags/v3.8.6:db45529, Sep 23 2020, 15:52:53) [MSC v.1927 64 bit (AMD64)]
